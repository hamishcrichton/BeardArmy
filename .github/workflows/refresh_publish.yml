name: Refresh and Publish Artifacts

on:
  schedule:
    - cron: '0 3 * * *' # Daily at 03:00 UTC
  workflow_dispatch:
    inputs:
      mode:
        description: "Run mode: refresh (recent) or backfill (all)"
        required: true
        default: refresh
        type: choice
        options: [refresh, backfill]
      since_days:
        description: "Days to look back for refresh"
        required: false
        default: '7'
        type: string
      channel_id:
        description: "Channel ID to ingest (overrides YOUTUBE_CHANNEL_ID)"
        required: false
        type: string

permissions:
  contents: write

jobs:
  refresh:
    runs-on: ubuntu-latest
    concurrency:
      group: refresh-publish
      cancel-in-progress: false
    env:
      DATABASE_URL: sqlite:///./data/app.db
      DATA_DIR: ./data
      # Supply these in repo Settings â†’ Secrets/Variables
      YOUTUBE_API_KEY: ${{ secrets.YOUTUBE_API_KEY }}
      YOUTUBE_CHANNEL_ID: ${{ vars.YOUTUBE_CHANNEL_ID }}
      GEOCODER_PROVIDER: ${{ vars.GEOCODER_PROVIDER }}
      GEOCODER_API_KEY: ${{ secrets.GEOCODER_API_KEY }}
      PYTHONPATH: ingestion
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'

      - name: Install ingestion dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r ingestion/requirements.txt

      - name: Prepare data directories
        run: |
          mkdir -p data public/data

      - name: Initialize SQLite schema (if missing)
        run: |
          if [ ! -f data/app.db ]; then
            echo "No existing SQLite DB found. Creating schema..."
            sqlite3 data/app.db < db/sqlite_init.sql
          else
            echo "Reusing existing data/app.db"
          fi

      - name: Check environment variables
        run: |
          test -n "${YOUTUBE_API_KEY}" || (echo "Missing YOUTUBE_API_KEY" && exit 1)
          echo "YOUTUBE_API_KEY present"
          if [ -n "${GEOCODER_PROVIDER}" ]; then echo "GEOCODER_PROVIDER=${GEOCODER_PROVIDER}"; fi
          if [ -n "${GEOCODER_API_KEY}" ]; then echo "GEOCODER_API_KEY present"; fi

      - name: Ingest content (refresh or backfill)
        run: |
          MODE="${{ github.event.inputs.mode }}"; MODE=${MODE:-refresh}
          INPUT_CHANNEL="${{ github.event.inputs.channel_id }}"
          CHANNEL="${INPUT_CHANNEL:-$YOUTUBE_CHANNEL_ID}"
          if [ -z "$CHANNEL" ]; then echo "Missing channel_id (no input and YOUTUBE_CHANNEL_ID empty)" && exit 1; fi
          if [ "$MODE" = "backfill" ]; then
            echo "Running full backfill..."
            python -m bmf_ingest.main backfill --channel "$CHANNEL"
          else
            SD="${{ github.event.inputs.since_days }}"; SD=${SD:-7}
            echo "Running refresh since ${SD} days..."
            python -m bmf_ingest.main refresh --since-days ${SD} --channel "$CHANNEL"
          fi

      - name: Publish artifacts
        run: |
          python -m bmf_ingest.main publish --out ./public/data

      - name: Inspect published outputs
        run: |
          echo "Listing public/data:" && ls -la public/data || true
          echo "--- challenges.geojson (head) ---" && head -n 40 public/data/challenges.geojson || true
          echo "--- table.json (head) ---" && head -n 40 public/data/table.json || true
          echo "--- DB counts ---" && sqlite3 data/app.db "select 'videos', count(*) from videos; select 'restaurants', count(*) from restaurants; select 'challenges', count(*) from challenges; select 'geocoded_restaurants', count(*) from restaurants where lat is not null and lng is not null;" || true

      - name: Upload published data (artifact)
        uses: actions/upload-artifact@v4
        with:
          name: public-data
          path: public/data

      - name: Commit and push changes (if any)
        run: |
          CHANGES=$(git status --porcelain public/data data/app.db | wc -l)
          if [ "$CHANGES" -gt 0 ]; then
            git config user.name "github-actions[bot]"
            git config user.email "41898282+github-actions[bot]@users.noreply.github.com"
            git add -A -f public/data data/app.db
            git commit -m "chore(data): refresh published artifacts and persist DB"
            git push
          else
            echo "No changes to publish."
          fi
